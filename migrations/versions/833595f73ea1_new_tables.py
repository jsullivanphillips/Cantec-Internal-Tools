"""new tables

Revision ID: 833595f73ea1
Revises: 6eb2f303882a
Create Date: 2025-09-18 13:19:41.785172

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '833595f73ea1'
down_revision = '6eb2f303882a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dim_date',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('d', sa.Date(), nullable=False),
    sa.Column('day', sa.SmallInteger(), nullable=False),
    sa.Column('month', sa.SmallInteger(), nullable=False),
    sa.Column('year', sa.SmallInteger(), nullable=False),
    sa.Column('quarter', sa.SmallInteger(), nullable=False),
    sa.Column('month_start', sa.Date(), nullable=False),
    sa.Column('month_name', sa.String(length=12), nullable=False),
    sa.Column('week_of_year', sa.SmallInteger(), nullable=True),
    sa.Column('is_month_start', sa.Boolean(), nullable=False),
    sa.Column('is_month_end', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('d')
    )
    with op.batch_alter_table('dim_date', schema=None) as batch_op:
        batch_op.create_index('ix_dim_date_month_start', ['month_start'], unique=False)

    op.create_table('dim_service',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_type', postgresql.ENUM('ANNUAL', 'PM', 'PLANNED_MAINT', 'NON_RECURRING', name='service_type_enum'), nullable=False),
    sa.Column('service_line', sa.String(length=100), nullable=True),
    sa.Column('is_recurring', sa.Boolean(), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('service_type', 'service_line', name='uq_dim_service_type_line')
    )
    with op.batch_alter_table('dim_service', schema=None) as batch_op:
        batch_op.create_index('ix_dim_service_is_recurring', ['is_recurring'], unique=False)
        batch_op.create_index('ix_dim_service_type', ['service_type'], unique=False)

    op.create_table('dim_source',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source_kind', postgresql.ENUM('HISTORICAL_JOB', 'SCHEDULED_JOB', 'LOCATION_TAG', name='source_kind_enum'), nullable=False),
    sa.Column('priority', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_kind')
    )
    op.create_table('fact_monthly_service_need',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('month_id', sa.Integer(), nullable=False),
    sa.Column('location_pk', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('hours_needed', sa.NUMERIC(precision=10, scale=2), nullable=False),
    sa.Column('is_booked', sa.Boolean(), nullable=False),
    sa.Column('evidence_level', sa.SmallInteger(), nullable=True),
    sa.Column('events_count', sa.Integer(), nullable=False),
    sa.Column('last_computed_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['location_pk'], ['location.id'], ),
    sa.ForeignKeyConstraint(['month_id'], ['dim_date.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['dim_service.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('month_id', 'location_pk', 'service_id', name='uq_fmsn_month_loc_service')
    )
    with op.batch_alter_table('fact_monthly_service_need', schema=None) as batch_op:
        batch_op.create_index('ix_fmsn_loc', ['location_pk'], unique=False)
        batch_op.create_index('ix_fmsn_month', ['month_id'], unique=False)
        batch_op.create_index('ix_fmsn_service', ['service_id'], unique=False)

    op.create_table('fact_service_event',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('location_pk', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('date_id', sa.Integer(), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.BIGINT(), nullable=True),
    sa.Column('completed_on', sa.DateTime(timezone=True), nullable=True),
    sa.Column('scheduled_for', sa.DateTime(timezone=True), nullable=True),
    sa.Column('hours_actual', sa.NUMERIC(precision=10, scale=2), nullable=True),
    sa.Column('hours_booked', sa.NUMERIC(precision=10, scale=2), nullable=True),
    sa.Column('hours_estimated', sa.NUMERIC(precision=10, scale=2), nullable=True),
    sa.Column('tech_count', sa.SmallInteger(), nullable=True),
    sa.Column('multi_day', sa.Boolean(), nullable=True),
    sa.Column('multi_tech_required', sa.Boolean(), nullable=True),
    sa.Column('ingested_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('(hours_actual IS NULL OR hours_actual >= 0) AND (hours_booked IS NULL OR hours_booked >= 0) AND (hours_estimated IS NULL OR hours_estimated >= 0)', name='ck_fse_nonnegative_hours'),
    sa.ForeignKeyConstraint(['date_id'], ['dim_date.id'], ),
    sa.ForeignKeyConstraint(['location_pk'], ['location.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['dim_service.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['dim_source.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('fact_service_event', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_fact_service_event_job_id'), ['job_id'], unique=False)
        batch_op.create_index('ix_fse_date', ['date_id'], unique=False)
        batch_op.create_index('ix_fse_loc_serv_date', ['location_pk', 'service_id', 'date_id'], unique=False)
        batch_op.create_index('ix_fse_source', ['source_id'], unique=False)


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table('fact_service_event', schema=None) as batch_op:
        batch_op.drop_index('ix_fse_source')
        batch_op.drop_index('ix_fse_loc_serv_date')
        batch_op.drop_index('ix_fse_date')
        batch_op.drop_index(batch_op.f('ix_fact_service_event_job_id'))

    op.drop_table('fact_service_event')
    with op.batch_alter_table('fact_monthly_service_need', schema=None) as batch_op:
        batch_op.drop_index('ix_fmsn_service')
        batch_op.drop_index('ix_fmsn_month')
        batch_op.drop_index('ix_fmsn_loc')

    op.drop_table('fact_monthly_service_need')
    op.drop_table('dim_source')
    with op.batch_alter_table('dim_service', schema=None) as batch_op:
        batch_op.drop_index('ix_dim_service_type')
        batch_op.drop_index('ix_dim_service_is_recurring')

    op.drop_table('dim_service')
    with op.batch_alter_table('dim_date', schema=None) as batch_op:
        batch_op.drop_index('ix_dim_date_month_start')

    op.drop_table('dim_date')
    # ### end Alembic commands ###
